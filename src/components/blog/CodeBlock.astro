---
import { Icon } from 'astro-icon/components';

export interface Props {
  code: string;
  language?: string;
  title?: string;
  showLineNumbers?: boolean;
  highlightLines?: number[];
  className?: string;
}

const {
  code,
  language = 'text',
  title = '',
  showLineNumbers = true,
  highlightLines = [],
  className = ''
} = Astro.props;

const lines = code.split('\n');
---

<div class={`relative group mb-6 ${className}`}>
  {title && (
    <div class="flex items-center justify-between bg-gray-800 text-white px-4 py-2 rounded-t-lg">
      <span class="text-sm font-medium flex items-center gap-2">
        <Icon name="tabler:code" class="w-4 h-4" />
        {title}
      </span>
      <span class="text-xs text-gray-400 uppercase">{language}</span>
    </div>
  )}
  
  <div class="relative">
    <pre class={`overflow-x-auto p-4 bg-gray-900 text-gray-100 ${title ? 'rounded-b-lg' : 'rounded-lg'} text-sm leading-relaxed`}><code class={`language-${language}`}>{lines.map((line, index) => (
      <div 
        class={`flex ${highlightLines.includes(index + 1) ? 'bg-yellow-500/20 border-l-2 border-l-yellow-500' : ''}`}
      >
        {showLineNumbers && (
          <span class="select-none text-gray-500 pr-4 text-right w-8 flex-shrink-0">
            {index + 1}
          </span>
        )}
        <span class="flex-1">{line || ' '}</span>
      </div>
    )).join('')}</code></pre>
    
    <!-- Copy Button -->
    <button
      class="absolute top-2 right-2 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg opacity-0 group-hover:opacity-100 transition-all duration-200"
      onclick={`copyCode(\`${code.replace(/`/g, '\\`')}\`)`}
      aria-label="Copy code"
    >
      <Icon name="tabler:copy" class="w-4 h-4" />
    </button>
  </div>
</div>

<script>
  (window as any).copyCode = function(code: string) {
    navigator.clipboard.writeText(code).then(() => {
      // Show toast notification
      const toast = document.createElement('div');
      toast.textContent = 'Code copied to clipboard!';
      toast.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-fade-in-up';
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 2000);
    }).catch(() => {
      const toast = document.createElement('div');
      toast.textContent = 'Failed to copy code';
      toast.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-fade-in-up';
      document.body.appendChild(toast);
      setTimeout(() => toast.remove(), 2000);
    });
  };
</script>

<style>
  /* Enhanced syntax highlighting */
  code .keyword { color: #ff79c6; }
  code .string { color: #f1fa8c; }
  code .comment { color: #6272a4; font-style: italic; }
  code .number { color: #bd93f9; }
  code .function { color: #50fa7b; }
  code .operator { color: #ff79c6; }
  code .variable { color: #8be9fd; }
  
  /* Language-specific improvements */
  .language-python .keyword { color: #ff79c6; }
  .language-javascript .keyword { color: #ff79c6; }
  .language-typescript .keyword { color: #ff79c6; }
  .language-css .property { color: #50fa7b; }
  .language-html .tag { color: #ff79c6; }
  .language-markdown .header { color: #50fa7b; font-weight: bold; }
</style>
