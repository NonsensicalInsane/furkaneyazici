---
// @ts-ignore
import merge from 'lodash.merge';
import { SEO as AstroSeo } from 'astro-seo';
import type { SEOProps as AstroSeoProps } from 'astro-seo';

import { SITE, METADATA, I18N } from '../../utils/config';
import type { MetaData } from '../../types';
import { getCanonical } from '../../utils/permalinks';
import { adaptOpenGraphImages } from '../../utils/images';

/**
 * Props passed to this component from page front‑matter or parent layout.
 */
export interface Props extends MetaData {
  /** Skip the global title template when true */
  dontUseTitleTemplate?: boolean;
}

// ────────────────────────────────────────────────────────────
// Destructure incoming props with sensible fallbacks
// ────────────────────────────────────────────────────────────
const {
  title,
  ignoreTitleTemplate = false,
  canonical = String(getCanonical(String(Astro.url.pathname))),
  robots = {},
  description,
  openGraph = {},
  twitter = {},
} = Astro.props as Props;

// ────────────────────────────────────────────────────────────
// Build the base SEO config and merge three layers
//   1) hard‑coded safe defaults
//   2) site‑wide defaults (from /utils/config)
//   3) page‑specific overrides (from props)
// ────────────────────────────────────────────────────────────
const seoProps = merge(
  {
    title: '',
    titleTemplate: '%s',
    canonical,
    noindex: true,
    nofollow: true,
    description: undefined,
    openGraph: {
      url: canonical,
      site_name: SITE?.name,
      locale: I18N?.language || 'en',
      type: 'website',
      image: '/og-default.png',
    },
    twitter: {
      cardType: 'summary',
    },
  },
  {
    title: METADATA?.title?.default,
    titleTemplate: METADATA?.title?.template,
    noindex: METADATA?.robots?.index === false,
    nofollow: METADATA?.robots?.follow === false,
    description: METADATA?.description,
    openGraph: METADATA?.openGraph,
    twitter: METADATA?.twitter,
  },
  {
    title,
    titleTemplate: ignoreTitleTemplate ? '%s' : undefined,
    canonical,
    noindex: robots?.index === false,
    nofollow: robots?.follow === false,
    description,
    openGraph: { url: canonical, ...openGraph },
    twitter,
  }
);

// ────────────────────────────────────────────────────────────
// Ensure required Open Graph keys exist for astro‑seo
// ────────────────────────────────────────────────────────────
const og = await adaptOpenGraphImages(seoProps.openGraph, Astro.site);

// Extract basic required properties
const ogTitle = seoProps.title || SITE?.name || 'Website';
const ogType = og?.type || 'website';
const ogImage = (Array.isArray(og?.images) && og.images.length > 0 && og.images[0]?.url ? og.images[0].url : '/og-default.png');
const ogUrl = og?.url || canonical;

// Create the properly structured OpenGraph object
const fixedOG = {
  basic: {
    title: ogTitle,
    type: ogType,
    image: ogImage,
    url: ogUrl,
  },
  // Add any additional properties from the processed og object (excluding the basic ones)
  ...Object.fromEntries(
    Object.entries(og || {}).filter(([key]) => !['title', 'type', 'image', 'url'].includes(key))
  ),
};
---

<AstroSeo {...seoProps} openGraph={fixedOG} />
