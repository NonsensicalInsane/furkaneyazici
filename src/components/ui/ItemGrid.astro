---
import { twMerge } from 'tailwind-merge';
import type { ItemGrid } from '../../types';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props as ItemGrid;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, classes: itemClasses = {} }) => (
        <div class="modern-card p-6 hover-lift group">
          <div class={twMerge('flex flex-col', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center mb-4">
              {(icon || defaultIcon) && (
                <div class="p-3 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 group-hover:from-blue-400 group-hover:to-purple-500 transition-all duration-300">
                  <Icon
                    name={icon || defaultIcon}
                    class={twMerge('w-8 h-8 text-white', itemClasses?.icon)}
                  />
                </div>
              )}
            </div>
            <div class="text-center">
              {title && <h3 class={twMerge('text-xl font-bold mb-3 text-white group-hover:text-blue-300 transition-colors duration-300', titleClass, itemClasses?.title)}>{title}</h3>}
              {description && (
                <p
                  class={twMerge('text-slate-300 leading-relaxed', descriptionClass, itemClasses?.description)}
                  set:html={description}
                />
              )}
              {callToAction && (
                <div class={twMerge(`${title || description ? 'mt-4' : ''}`, actionClass, itemClasses?.actionClass)}>
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
